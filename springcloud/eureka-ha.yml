---
apiVersion: v1
kind: Service
metadata:
  name: eureka
  labels:
    app: eureka
spec:
  ports:
  - port: 8761
    name: eureka
  clusterIP: None
  selector:
    app: eureka

---
apiVersion: v1
kind: Service
metadata:
  name: eureka-public
spec:
  ports:
  - port: 8761
    targetPort: 8761
    name: eureka
  selector:
    app: eureka
  type: LoadBalancer

---    
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: eureka
spec:
  serviceName: "eureka"
  replicas: 2 
  selector:
    matchLabels:
      app: eureka
  template:
    metadata:
      labels:
        app: eureka
    spec:
      containers:
      - name: eureka
        image: registry.cn-hangzhou.aliyuncs.com/jingshan/eureka:latest
        ports:
        - containerPort: 8761
        env:
          # Due to camelcase issues with "defaultZone" and "preferIpAddress", _JAVA_OPTIONS is used here
        - name: _JAVA_OPTIONS
          value: -Deureka.instance.preferIpAddress=false -Deureka.client.serviceUrl.defaultZone=http://eureka-0.eureka.default.svc.cluster.local:8761/eureka/,http://eureka-1.eureka.default.svc.cluster.local:8761/eureka/
        - name: EUREKA_CLIENT_REGISTERWITHEUREKA
          value: "true"
        - name: EUREKA_CLIENT_FETCHREGISTRY
          value: "true"
          # In the docker image, this is set to localhost. Otherwise, we could leave this empty.
          # The hostnames must match with the the eureka serviceUrls, otherwise the replicas are reported as unavailable in the eureka dashboard
        - name: EUREKA_INSTANCE_HOSTNAME
          value: ${spring.cloud.client.hostname}
          # For the other (stateless) services, this should probably be set to true, since their pods have no DNS-resolvable hostnames
       #- name: EUREKA_INSTANCE_PREFERIPADDRESS
       #  value: "false"
  # No need to start the pods in order. We just need the stable network identity
  podManagementPolicy: "Parallel"